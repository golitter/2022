#include <iostream>
#include <vector>
#include <string>
#include <map>
// map<key, value>
/**
 * @file lab.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-06-16
 * MAP:
 *  set --> 集合：
 *  map --> 映射；
 *  map 是一种key-value型容器，其中 key 是关键字，起到索引作用，
 *  而value就是其对应的值。与set不同，它支持下标访问；
 * map<key, value> ma;
 * ma.insert(make_pair(key,value));
 * m.erase() // (可以为迭代器类型 或 key)
 * m.empty();;m.size();
 * @copyright Copyright (c) 2022
 * 
 */
#include <algorithm>
#include <set>
/**
 * @file labb.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-06-16
 * 
 * SET:
 *  set;
 *          元素唯一：
        默认按升序排列：
    插入： 只能: .insert(elem);
    删除 .erase(keyelem) || erase(iterator) || earse(iter first, inter last);
    查找 .find(elem) : 返回迭代 auto itera = .find(elem); // *itera;
    二分查找： lower_bound(elem) --> >= elem // iter;
              upper_bound(elem) --> > elem // iter; 类似上面；
              
 * @copyright Copyright (c) 2022
 * 
 */
using namespace std;

int main()
{
    map<char,int> mca;
    for(int i = 0; i < 10; ++i) {
        mca.insert(make_pair('a'+i, i));
    }
    cout<<mca['d']<<endl;
    map<char,int>::iterator it = mca.begin();
    mca.erase('b');
    for(it; it != mca.end(); ++it) {
        cout<<it->first<<it->second<<endl;
    }
    return 0;
}
