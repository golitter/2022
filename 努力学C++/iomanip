#include <iostream>
// 流对象与文件操作
    // 当程序与外界环境进行信息交换时，存在两个对象，一个是程序中的对象，另一个是文件对象
    // 流 是一种抽象，它负责在数据的生产者和数据的消费者之间建立联系，并管理数据的流动。
// 指定这个流对象与某个文件对象建立联系
// 程序操作流对象
// 流对象通过文件系统对所连接的文件对象产生作用。

// 读操作 在流数据抽象中被称为提取
// 写操作 被称为 插入
// 操纵符 manipulator 控制输出格式
// setw width 紧随其后的改变
// dec oct hex 默认改变
#include <ctime>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;
void test() {
    vector<int> a;
    for(int i = 0; i < 10; ++i) a.push_back(i);
    random_shuffle(a.begin(), a.end());
    cout.width(10);
    cout<<setw(10)<<1<<endl;
    for(int i = 0; i < a.size(); ++i) {
        cout.width(10);
        cout<<setiosflags(ios_base::left)<<a[i]<<endl<<resetiosflags(ios_base::left); // 左对齐 取消左对齐
        // setiosflags 是持久的，需要resetiosflags来进行取消 可以有用 | 来组合
        // setiosflags 流的格式标识 resetiosflags取消
        
        // 精度设置 setprecision操纵符 include <iomanip>
            // 如果不设置fixed or scientific ，精度值表示有效数字位数。
            // 如果设置了fixed or scientific ，表示小数点之后的位数。
                // e.g. cout<<setiosflags(ios_base::fixed); cout<<setprecision(1); 小数点后的 1 位
                // e.g. cout<<setprecision(1); 有效位数一位
    }
}
int main()
{
    test();
}
