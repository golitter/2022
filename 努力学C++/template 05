#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

// 类模板分文件编写问题及解决
// 1，直接包含 源文件
// 2，将.h 和 .cpp 中的内容写到一起，将后缀名改为 .hpp 文件

// 类模板 和 友元 and 全局函数
// SUMMARY: 建议全局函数做类内实现，用法简单，而且编译器可以直接识别

// 提前让编译器知道Person类存在;
template<class T1, class T2>
class Person;
// 类外实现
template<class T1, class T2>
// NO Friend;
void printPerson2(Person<T1, T2> p) {
    cout<<"类外实现 ---- 姓名："<<p.m_Name<<" 年龄："<<p.m_Age<<endl;

}

template<class T1, class T2>
class Person {
    // 全局函数， 类内实现
    friend void printPerson(Person<T1, T2> p) {
        cout<<"姓名："<<p.m_Name<<" 年龄："<<p.m_Age<<endl;
    }
    // 全局函数， 类外实现;
    //  加空模板参数列表
    // 如果全局函数 是类外实现，需要让编译器提前知道这个函数的存在
    friend void printPerson2<>(Person<T1, T2> p);
public:
    Person(T1 name, T2 age);
    void showPerson();
private:
    T1 m_Name;
    T2 m_Age;
};


template<class T1, class T2>
Person<T1, T2>::Person(T1 name, T2 age) {
    this->m_Name = name;
    this->m_Age = age;
}
template<class T1, class T2>
void Person<T1, T2>::showPerson() {
    cout<<"姓名："<<this->m_Name<<" 年龄："<<this->m_Age<<endl;
}

void test01() {
    Person<string, int> p("Tom", 22);
    printPerson(p);
    printPerson2(p);
}
int main()
{
    test01();
    return 0;
}
