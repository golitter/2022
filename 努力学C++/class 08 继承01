#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

// 继承好处：减少重复代码:
// 语法: class 子类：继承方式 父类;
// 子类 也叫 派生类;
// 父类 也叫 基类;

// 继承方式:

// 公共继承:

class Base1 {
	public:
		int m_A;
	protected:
		int m_B;
	private:
		int m_C;
};
// 公共继承;
class Son1: public Base1 {
	public:
		void func() {
			m_A = 33; // 父类中的公共权限成员，到子类中依然是公共权限;
			m_B = 34; // 父类中的保护权限成员 到子类中依然是保护权限;
			// m_C = 33; // 父类中的隐私成员 子类不可以访问；			
		}
};
// 保护继承;
class Son2: protected Base1 {
	public:
	 void func() {
		m_A = 33233; // 父类中公共成员 到子类中变为 保护权限;
		m_B = 34565324; // 父类中保护成员 到子类中变为 保护继承: 没变;
	 }
};
class Son3: private Base1 {
	public:
		void func() {
			m_A = 4254345; // 父类中的公共成员 到子类中变为 私有成员
			m_B = 5324324; // 父类中的保护成员 到子类中变为 私有成员
				// 父类中的私有成员 不可以访问;
		}
};
class GrandSon1 : public Son3 {
	public:
		void func() {
			///m_A = 3; // 私有成员 不可以访问
		}
};
void test2() {
	Son1 son1;
	son1.func();
	cout<<son1.m_A<<endl;
}
void test3() {
	Son2 son2;
	son2.func();
	//cout<<son2.m_A<<endl;
}
void test4() {
	Son3 son3;
	son3.func();
	//cout<<son3.m_A<<endl;
}














class BasePage {
public:
	void header() {
		cout<<"首页、公开课、登录、注册...(公共头部)"<<endl;
	}
	void footer() {
		cout<<"帮助中心、交流合作、站内地图...(公共底部)"<<endl;
	}
	void left() {
		cout<<"Java、Python、C++..."<<endl;

	}
};
class Java : public BasePage {
	public:
		void content() {
			cout<<"Java 下载视频"<<endl;
		}
};
class Python : public BasePage {
	public:
		void content() {
			cout<<"Python 下载视频"<<endl;
		}
};
class Cpp: public BasePage {
	public:
		void content() {
			cout<<"C++ 下载视频"<<endl;
		}
};
void test1() {
	cout<<"this is Java"<<endl;
	Java a;
	a.header();
	a.content();
	a.left();
	a.footer();
	cout<<"------------------------ 分割线"<<endl;
	Python ab;
	ab.header();
	ab.content();
	ab.left();
	ab.footer();
}
int main()
{
	test2();
	return 0;
}
