#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

// 关系运算符;


// 函数调用运算符重载;
class MyAdd {
public:
	void operator() (int a, int b) {
		cout<<"the a add b equal to "<<a+b<<endl;
	}
};
class MyPrint {
public:
	void operator()(string test) { // very very like function;
		cout<<test<<endl;

	}
};
class Per{
public:

	// 重载 == :
	bool operator== (Per &p) {
		if(this->m_age == p.m_age && this->m_name == p.m_name) return true;
		return false;
	}
	bool operator!=(Per &p) {
		if(this->m_age == p.m_age && this->m_name == p.m_name) return false;
		return true;
	}
	void Print() {
		cout<<"哈哈啊哈哈"<<endl;
	}
	Per(string n, int ag) {
		m_name = n;
		m_age = ag;
	}
	string m_name;
	int m_age;
};
class Person {
public:
	// 重载 =;
	Person& operator=(Person &p) {
		// 编译器提供浅拷贝
		// 

		// 应该先判断是否有属性在堆区，如果有 则 先释放， 然后再拷贝
		if(m_age != NULL) {
			delete m_age;
			m_age = NULL;

		}
		// 深拷贝;
		m_age = new int(*p.m_age);
		return *this;
	}
	Person(int age) {
		m_age = new int(age);
	}
	int *m_age;
	~Person() {
		if(m_age != NULL) {
			delete m_age;
			m_age = NULL;

		}
	}
};

test1() {
	Person a(34);
	cout<<*a.m_age<<endl;
	Person b(33);
	b = a; // 堆区内存重复释放；
	Person c(343);
	c = a = b;
	cout<<*a.m_age<<endl;
	cout<<*c.m_age<<endl;
	cout<<*b.m_age<<endl;
	cout<<endl;
	cout<<*b.m_age<<endl;
}
test2() {
	Per a("1234",1234);
	Per b = a;
	if(a == b) {
		cout<<"a equal b //// lalalalala"<<endl;
	}
	if(a != b) {
		cout<<"a not equal b \\\\\\   "<<endl;
	}

}

test01() {
	MyPrint myprint;
	myprint("Hello World!"); // 由于使用起来非常类似于函数调用，因此称为 仿函数；
	// 仿函数 非常灵活;
	MyAdd myadd;
	myadd(34,343);
	// 匿名函数对象;
	MyAdd()(100,100);
}
int main()
{
	test01();
	return 0;
}
