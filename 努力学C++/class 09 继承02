#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;


// 继承中的同名静态成员处理方式

class Base2 {
public:
	static void func() {
		cout<<"this static func of Base2"<<endl;
	}
	static int m_A;

};
int Base2::m_A = 111;

class Son2 : public Base2 {
public:
	static void func() {
		cout<<"this static func of Son2"<<endl;
	}
	static int m_A;
};
int Son2::m_A = 222;
// 同名静态成员属性;
void test001() {
	// 1 . 通过对象访问:
	Son2 s;
	cout<<"m_A = "<<s.m_A<<endl;
	cout<<"Base2::m_A = "<<s.Base2::m_A<<endl;

	// 2 . 通过类名访问:
	cout<<"通过类名访问:"<<endl;
	cout<<"Son2 下的 m_A :"<<Son2::m_A<<endl;
	cout<<"Base2 下的 m_A :"<<Base2::m_A<<endl;
	// 两个"::" 不一样， 
	// 第一个 "::" 代表通过类名方式访问，
	// 第二个 "::" 代表访问父类作用域下
	cout<<"Base2 Son2 下的 m_A :"<<Son2::Base2::m_A<<endl;

}

// 同名静态成员函数；
void test002() {
	// 有的和 同名... 相似; 


	// 1 . 通过对象
	cout<<"通过对象访问"<<endl;
	Son2 s;
	s.func();
	s.Base2::func();
	// 2 . 通过类名
	cout<<"通过类名访问"<<endl;
	Son2::func();
	Base2::func();
	Son2::Base2::func();
}
















// 同名处理;
class Base1 {
public:
	Base1() {
		m_A = 100;
	}
	void func() {
		cout<<"Base1 下的成员函数"<<endl;
	}
	void func(int a) {
		cout<<"Base1 下的含 int 的成员函数"<<" :"<<a<<endl;
	}
	int m_A;

};

class Son1 : public Base1 {
public:
	void func() {
		cout<<"Son1 Base1 中的成员函数"<<endl;
	}
	Son1() {
		m_A = 200;
	}
	int m_A;
};

// 同名成员属性处理:
void test01() {
	Son1 a;
	cout<<"Son1 下面的m_A: "<<a.m_A<<endl;
	// 如果通过子类对象 访问到父类中的同名成员，需要加作用域;
	cout<<"Base1 下面的m_A: "<<a.Base1::m_A<<endl;
}
// 同名成员函数处理:
void test02() {
	Son1 a;
	a.func(); // 直接调用 调用是子类中的同名成员;
	// 调用父类中同名成员函数；

	// 如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数；

	a.Base1::func();
	a.Base1::func(34);
}















































// 继承中的构造和析构函数

// 顺序如下;
	// 先构造父类，再构造子类， 析构顺序和构造顺序相反;
class Base {
public:
	Base() {
		cout<<"Base 构造函数"<<endl;
	}
	~Base() {
		cout<<"Base 析构函数"<<endl;
	}
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

class Son: public Base {
public:
	Son() {
		cout<<"Son 构造函数"<<endl;
	}
	~Son() {
		cout<<"Son 析构函数"<<endl;
	}
	int m_D;
};

void test1() {
	cout<<"size of Son = "<<sizeof(Son)<<endl;
	// 16 父类中的所有 非静态成员属性 都会被子类继承下去;
	// 父类中的私有成员属性 是被编译器给隐藏了，因此是访问不到;

	// 可以利用 开发人员命令提示工具查看对象模型;
	// 跳转盘符：F:
	// 跳转文件路径 cd具体路径下;
		// 查看命令;
		// cl / dl reportSingleClassLayout类名 文件名
		// 教程:https://www.bilibili.com/video/BV1et411b73Z?p=129&spm_id_from=pageDriver&vd_source=13dfbe5ed2deada83969fafa995ccff6

	Son a;
}







int main()
{
	test002();
	return 0;
}
