#include <bits/stdc++.h>
using namespace std;

// 高精度加法：
// 高精度减法：大减小， -- ，t+10 % 10 t<0 1 or 0, 除后置零
// 高精度乘法：遍历 ASize || t 有A t += A[i]*mulnuam, C.push(...%10), t/= 10
// 高精度除法：r(余数) = 0, 遍历 r = r*10 + A[i], c.push(t/b) r%=b,  reverse, 除后置零。

// 除了除法，其他都是逆序哦哦哦


// 默认 均为 正
const int N = 1e6 + 21;
// C = A + B;
vector<int> add(vector<int>&A, vector<int>&B) {
    vector<int> C;
    int t = 0; // 进位
    for(int i = 0; i < A.size() | i < B.size(); ++i) {
        if(i < A.size()) t += A[i];
        if(i < B.size()) t += B[i];
        C.push_back(t %10);
        t /= 10;
    }
    if(t) C.push_back(1);
    return C;
}

// D = A - B;
bool isAGtB(vector<int>&A, vector<int>&B) {
    if(A.size() != B.size()) return A.size() > B.size();
    for(int i = A.size()-1; i >= 0; --i) {
        if(A[i] != B[i]) return A[i] > B[i];
    }
    return true;
}
vector<int> sub(vector<int>&A, vector<int>&B) {
    vector<int> C;
    if(!isAGtB(A, B)) {
        printf("-");
        swap(A,B);
    }
    int t = 0;
    for(int i = 0; i < A.size(); ++i) {
        t = A[i] - t;
        if(i < B.size()) t -= B[i];
        C.push_back((t + 10)%10);
        if(t < 0) t = 1;
        else t = 0;
    }
    while(C.size() > 1 && C.back() == 0) {
        C.pop_back();
    }
     return C;
}

// C = A * B;
vector<int> mul(vector<int> &A, int &bb) {
    vector<int> C;
    int t = 0;
    for(int i = 0; i < A.size() || t; ++i) {
        if(i < A.size()) t += A[i]*bb;
        C.push_back(t % 10);
        t /= 10;

    }
    return C;
}

// C ... r = A / B; 商是C， r 余数
vector<int> Div(vector<int> &A, int b, int &r) {
    vector<int> C;
    r = 0;
    for(int i = A.size()-1; i >= 0; --i) {
        r = r*10 + A[i];
        C.push_back(r /b);
        r %= b;
    }
    reverse(C.begin(), C.end());
    while(C.size() > 1 && C.back() == 0) C.pop_back();
    return C;
}
int main()
{
    string a,b;
    vector<int> A, B;
    cin>>a;
    cin>>b;
    int bb = stol(b);
    for(int i = a.size()-1; i >= 0; --i) A.push_back(a[i] - '0');
    for(int i = b.size()-1; i >= 0; --i) B.push_back(b[i] - '0');
    int r = 0;
    auto C = Div(A,bb, r);;
    reverse(C.begin(), C.end());
    for(int i = 0; i < C.size(); ++i) cout<<C[i];
}

// 总结
/**
 * @brief 
 * 
 * Number 1.
 *  高精度加法
 *      int t = 0;
 *      for(int i = 0; i < A.size() | i < B.size(); ++i)
 *      {
 *          if(i < A.size()) t += A[i];
 *          if(i < B.size()) t += B[i];
 *          C.push_back(t % 10);
 *          t /= 10;
 *      }
 *      if(t) C.push_back(1);
 * 
 * 
 */

/**
 * @brief 
 * 
 *  高精度减法
 *      必须是大数 减 小数 // size si and bigOrSmall
 *      then
 *      from bigBigData start ergo..
 *      t = bigbigData[i] - t;
 *      if bigsmalldata live  then t -= B[i];
 *      C.pushback( (t + 10)%10 )
 *      if t < 0 -> t = 1;
 *      else t = 0;
 *  last
 *      div suffix zero
 * 
 * 
 */


/**
 * @brief 
 * 
 *  高精度乘法：
 *      for(i = 0; i < A.size() || t; ++i) {
 *          if(i < A.size()) t += A[i]*mulnum;
 *          C.pushback(t % 10);
 *          t /= 10;        
 *           
 * }
 * 
 * 
 */

/**
 * @brief 
 *  
 *  高精度除法：
 *      **NOTICE: 非逆序
 *      r = 0; // this is 余数
 *          for(i = A.size - 1; i >= 0; --i)
 * {
 *          r = r*10 + A[i];
 *          C.pushback(r/b);
 *          r %= b;
 * }
 *          reverse;
 *          div suffix zero;
 * 
 * 
 */
