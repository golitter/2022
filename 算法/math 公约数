第二版：
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
using namespace std;


// 与质数相关的判断，基本都有 <= n/i 这代码，记得 是 <= , < 可能出错。
const int N = 1000021;
int prime[N],cnt;
// 判断是否为质数：
bool isPrime(int x) {
    if(x < 2) return false;
    for(int i = 2; i <= x/i; ++i) {
        if(x%i == 0) return false;
    }
    return true;
}
bool st[N];
// 在[1,n]内，判断质数，并找个有多少个质数
int get_Primes_CntPrimes() {
    int n = N;
    for(int i = 2; i <= n; ++i) {
        if(!st[i]) prime[cnt++] = i; 
        for(int j = 0; prime[j] <= n/i; ++j) {
            st[prime[j]*i] = true;
            if(i%prime[j] == 0) break;
        }
    }
    return cnt;
}
// 分解质因子，
void Didive() {
    int n; // cin>>n;
    for(int i = 2; i <= n/i; ++i) {
        if(n%i == 0) {
            int s = 0; // 指数哦
            while(n%i == 0) n /= i, s++;
            cout<<i<<" "<<s<<endl;
        }
    }
    if(n > 1) cout<<n<<" "<<1<<endl;
}
// 试除法求约数
vector<int> divide_Primes() {
    int n; // cin>>n;
    vector<int> vi;
    for(int i = 1; i <= n/i; ++i) {
        if(n%i == 0) {
            vi.push_back(i);
            if(n/i != i) vi.push_back(n/i);
        }
    }
    return vi;
}
/**
 * @brief 
如果 N = p1^c1 * p2^c2 * ... *pk^ck
约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)
约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)
 * 
 * @return int 
 */
// 求最大公约数
int gcd(int a, int b) {
    return b?gcd(b, a%b): a;
}
// 欧拉函数：小于等于n的正整数中与n互质的数的数目。
// 代码模板 与 分解质因数相似yyyhh。
int uola(int x) {
    int ret = x;
    for(int i = 2; i <= x/i; ++i) {
        if(x%i == 0) {
            ret = ret/i*(i-1);
        }
        while(x%i == 0) x /= i;
    }
    if(x > 1) ret = ret/x*(x-1);
    return ret;
}
int main()
{

}


第一版：
#include <bits/stdc++.h>
using namespace std;

// 质数
// 试除法
bool isPrime(int n) {
    if(1 == n) return false;
    for(int i = 2; i <= n/i; ++i) {
        if(n%i == 0) return false;
    }
    return true;
}
// 分解质因数
    // n中最多只包含一个大于sqrt(n)的质因子
void divide(int n) {
    for(int i = 2; i <= n; ++i) {
        if(n%i == 0) {
            int s = 0;
            while(n%i == 0) {
                n /= i;
                s++;
            }
            printf("%d %d\n", i, s);
        }
    }
}
const int N = 1021;
int prime[N],cnt;
bool st[N];
// 埃氏筛法
void get_prime1(int n) {
    for(int i = 2; i <= n; ++i) {
        if(!st[i]) {
            prime[cnt++] = n;
            for(int j = i + i; j <= n; j += i) {
                st[j] = true;
            }
        }
    }
}
// 线性筛  n 只会被最小质因子筛掉  faster
void get_prime2(int n) {
    for(int i = 2; i <= n; ++i) {
        if(!st[i]) prime[cnt++] = i;
        for(int j = 0; prime[j] <= n/i; j++) {
            st[prime[j]*i] = true;
            if(i%prime[j] == 0) break; // prime[j]一定是i的最小质因子，prime[j] 也一定是pj*i 的最小质因子
        }
    }
}
// 求约数
vector<int> get_divide(int n) {
    vector<int> ans;
    for(int i = 1; i <= n/i; ++i) {
        if(n%i == 0) {
            ans.push_back(i);
            if(i != n/i) ans.push_back(n/i);
        }
    }
    sort(ans.begin(), ans.end());
    return ans;
}
// 约数个数 (a1 +1) (a2 + 1) (a3 + 1) (a4 + 1)...
// 约数之和 (p1^0 + p1^1...) ... ()
int main()
{
    cout<<isPrime(2)<<endl;
    divide(17);
    cout<<endl;
    auto re = get_divide(100);
    for(auto & a: re) cout<<a<<" ";
    puts("");
    cout<<__gcd(10000,30000);
}
