#include <bits/stdc++.h>
using namespace std;

// 最短路
    // 朴素Dijjstra算法
    // 距离 dis[1] = 0, dis[others] = +INF
    // 已经确定最短路的点存入 s。迭代，找到不到s中的距离最近的点，存入 t
    // 用 t更新其他边的距离
typedef pair<int,int> PII;
const int N = 50010; 
int n, m;
int g[N][N];
int dis[N];
int h[N], e[N], ne[N],idx,w[N]; // w -- 权重
bool st[N]; // 确保<v0,vi>是否已被确定最短路径 true 表示确定，false表示否定

void Dijkstra__plain() {
    // input n and v;
    cin>>n>>m;
    memset(g,0x3f,sizeof(g));
    while(m--) {
        int a, b, c;
        cin>>a>>b>>c;
        g[a][b] = min(g[a][b], c); // 可能有多个边，只要找最小的那个边就行

    }
    // start Dijkstra;
    memset(dis,0x3f, sizeof(dis));
    dis[1] = 0;
    for(int i = 0; i < n; ++i) {
        int t = -1;;
        for(int j = 1; j <= n; ++j) {
            if(!st[j] && (t == -1 || dis[t] > dis[j])) { // 若还未存入，或者存入的较大，
                t = j;
            }
        }
        st[t] = true;
        for(int j = 1; j <= n; ++j) {
            dis[j] = min(dis[j], dis[t] + g[t][j]); 
        }
    }
    if(dis[n] == 0x3f3f3f3f) {
        ; // 无路径
    } else {
        ; // 有路径
    }
}
void add(int a, int b, int ww) {
    e[idx] = b, ne[idx] = h[a], w[idx] = ww, h[a] = idx++;
}
void Dijkstra__heap() { // 不需要对重边做处理
    // 手写堆，或者优先队列
    memset(h,-1,sizeof(h));
    
    // input

    memset(dis, 0x3f, sizeof(dis));
    dis[1] = 0;

    priority_queue<PII,vector<PII>,greater<PII>> heap; // 小顶堆
    heap.push({0,1});
    while(heap.size()) {
        auto t = heap.top();
        heap.pop();
        int ver = t.second, distance = t.first;
        if(st[ver]) {
            continue;
        }
        for(int i = h[ver]; i != -1; i = ne[i]) {
            int j = e[i];
            if(dis[j] > distance + w[i]) {
                dis[j] = distance + w[i];
                heap.push({dis[j],j});
            }
        }
    }
    if(dis[n] == 0x3f3f3f3f) {
        // wu
    } else {
        // you
    }
}

void Bellman_Ford() {
    // a -- w -- >b
    // 定义个结构体就可以喽。
    // 松弛操作
    // dis[b] <= dis[a] + w; 三角不等式
    // 有负权回路，不一定有最短路咯
}
int main()
{

}
