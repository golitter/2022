#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;
/**
 * @brief 
 * 
 *          pair<T1, T2>query;
 *          query.push_back({first, second});
 * 
 * 
 *          :离散化和前缀和： 区间和
 *          两个数， 一个是数， 另一个是数 要加上的 数字c;
 *          用 pair 来解决;
 *          NOTICE: 前缀和是从一开始的
 *          for(auto k: Pair) int x = k.first; diff[x] += k.second;
 * 
 */


// 离散化
//  可以出现重复数字 去重
// 如何求出 x， 二分
void testDiscate() {
    vector<int> alls;
    sort(alls.begin(), alls.end());
    alls.erase(unique(alls.begin(), alls.end()), alls.end());
} // binary_search(start, end, x) // Yes return 1 or return 0;
// upper_bound(start, end, x) return &Find(x);

// 区间求和:
typedef pair<int, int> PII;
vector<PII> segs;
void merge(vector<PII> &segs) {
    vector<PII> res;
    sort(segs.begin(), segs.end());
    int st = -2e9, ed = -2e9;
    for(auto seg: segs) {
        if(ed < seg.first) {
            if(st != -2e9) res.push_back({st, ed});
            st = seg.first; ed = seg.second;
        } else ed = max(ed, seg.second);
    }
    if(st != -2e9) res.push_back({st,ed});
    segs = res;
}

void testQAdd() {
    // 读入: pair<int ,int> segs;
    merge(segs);
}



int main()
{

    return 0;
}
