#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <stdio.h>
#include <algorithm>
using namespace std;
// 最小生成树：（无向图常见）在无向图中，连通而且不含有圈（环路）的图称为树
    // 无向图，特殊的有向图
// 正边 负边 都可以
// 记得 memset dist
/**
 * @brief 
 * 
 *      Prim 稠密图
 *          原理：最近的距离一定在MST上
 *      kruskal 稀疏图
 *          原理：最短的边一定在MST上
 */
#define rep(i,x,n) for(int i = x; i <= n; i++)

typedef long long LL;
typedef pair<int,int> PII;

const int INF = 0x3f3f3f3f;
const int N = 5021;
int n,m, ph[N][N], dist[N]; bool st[N];
void test();
int prim() {
    memset(dist,0x3f, sizeof(dist));
    int res = 0;
    for(int i = 0; i < n; ++i) {
        int t = -1;
        for(int j = 1; j <= n; ++j) {
            if(!st[j] && (t == -1 || dist[t] > dist[j])) {
                t = j;
            }
        }
        if(i && dist[t] == 0x3f3f3f3f) return 0x3f3f3f3f;
        if(i) res += dist[t];
                                            // this is 点到集合的距离
        for(int j = 1; j <= n; ++j) dist[j] = min(dist[j], ph[t][j]);
        
        st[t] = true;

    }
    return res;
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(ph,0x3f, sizeof(ph));
    while(m--) {
        int a, b, c; cin>>a>>b>>c;
        ph[a][b] = ph[b][a] = min(ph[a][b], c);
    }

    int t  = prim();
    if(t == 0x3f3f3f3f) {
        puts("orz");
    } else {
        cout<<t;
    }
    return 0;
}

void test() {
    #define mytest
    #ifdef mytest
    freopen("ANSWER.txt", "w",stdout);
    #endif
}

#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <stdio.h>
#include <algorithm>
using namespace std;

#define rep(i,x,n) for(int i = x; i <= n; i++)
// kruskal :
    // 将边的权重按从小到大排序，从小到大依次枚举每条边，并查集，不连通加入集合中
typedef long long LL;
typedef pair<int,int> PII;

const int INF = 0x3f3f3f3f;
const int N = 200021;
int n,m;
int p[N];
struct Edge {
    int a, b, w;
    // 方便排序
    bool operator< (const Edge &W) const {
        return w < W.w;
    }
}edges[N];
// 并查集
int find(int x) {
    if(p[x] != x) p[x] = find(p[x]);
    return p[x];
}
void test();
int main()
{
    scanf("%d%d",&n,&m);
    for(int i = 0; i < m; ++i) {
        int a,b,w; scanf("%d%d%d",&a,&b,&w);
        edges[i] = {a,b,w};
    }
    // 排序
    sort(edges, edges+m);
    int res = 0, cnt = 0;
    // 并查集初始化
    rep(i,1,n) p[i] = i;
    // 枚举
    for(int i = 0; i < m; ++i) {
        int a = edges[i].a, b = edges[i].b, w = edges[i].w;
        a = find(a), b = find(b);
        // 连通
        if(a != b) {
            res += w; cnt++; p[a] = b;
        }
    }
    // 如果cnt从1开始则为cnt < n， 但是cnt从0开始， 所以是cnt < n-1;;
    if(cnt < n - 1) puts("orz");
    else cout<<res;
    return 0;
}

void test() {
    #define mytest
    #ifdef mytest
    freopen("ANSWER.txt", "w",stdout);
    #endif
}





// 二分图： 当且仅当图中不含奇数环；

	// 染色法判断二分图
int n, h[N],e[N],ne[N],idx,color[N];
void add(int a, int b) {
	e[idx] = b, ne[idx] = h[a], h[a] = ++idx;
}
bool dfs(int u, int c) { // 不矛盾 返回 true
	color[u] = c;
	for(int i = h[u]; i != -1; i = ne[i]) {
		int j = e[i];
		if(color[j] == -1) {
			// 矛盾
			if(!dfs(j,!c)) return false;
			// 相邻颜色相同
		} else if(color[j] == c) return false;
	}
	return true;
}
bool check() {
	memset(color,-1,sizeof color) ;
	bool fg = true;
	for(int i = 1; i <= n; ++i) {
		if(color[i] == -1) {
			// 判断 + 染色
			if(!dfs(i,0)) {
				fg = false;
				break;
			}
		}
	}
	return fg;
}
int n,m;// ver edge
	// 并查集判断二分图
struct ckst{
	vector<int> p;
	ckst(int n): p(n+1) {iota(p.begin(), p.end(),0); }
	int find(int x) {return p[x]==x?x:p[x]=find(p[x]); }
	void uni(int x, int y) {p[find(x)]=p[find(y)]; }
	bool same(int x, int y) {return p[x]==p[y]; }
};
// M is max edge number
const int M = 34343;
struct Edge{int u,v; }edge[M];
bool check(int n, int m) {
	ckst cs(n*2);
	for(int i = 1; i <= m; ++i) { // 合并两个边上的点
		int u = edge[i].u, v = edge[i].v;
		cs.uni(u,v+n), cs.uni(u+n,v);
	}
	for(int i = 1; i <= m; ++i) {
		// 如果相连通，返回false
		if(cs.same(i,n+i)) return false;
	}
	return true;
}

const int INF = 0x3f3f3f3f;
// 匈牙利算法 二分图最大匹配
	// 月老 男女牵线问题
const int N = 1021, M = 50001;
int idx,h[N],e[M],ne[M];
void add(int a, int b) { // idx++; is so significant
	// 匈牙利算法 有向图 u ---> v or 男 --> 女 即可
	e[idx] = b, ne[idx] = h[a]; h[a] = idx++;
}
int match[N]; // 表示 j 的最后的那个结点是哪个
bool st[N]; // 表示第二个集合的点内 是否被遍历过
bool find(int x) {
	for(int i = h[x]; i != -1; i = ne[i]) {
		int j = e[i];
		if(!st[j]) {
			st[j]  = 1;
			// 表示 j没有配对的，或者j现在配对的可以再配对
			// 男女关系类比
			if(match[j] == 0 || find(match[j])) {
				match[j] = x;
				return true;
			}
		}
	}
	return false;
}
void test();
int main()
{
	int n, m, e;
	cin>>n>>m>>e;
	// 读入
	memset(h, -1, sizeof h);
	rep(i,0,e-1) {
		int u,v;
		cin>>u>>v; add(u,v);
	}

	// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点
	int res = 0;
	for(int i = 1; i <= n; ++i) {
		memset(st, false, sizeof st);
		//memset(match, 0, sizeof match);
		if(find(i)) res++;
	}
	cout<<res;
	return 0;
}
