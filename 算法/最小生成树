#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <stdio.h>
#include <algorithm>
using namespace std;
// 最小生成树：（无向图常见）在无向图中，连通而且不含有圈（环路）的图称为树
    // 无向图，特殊的有向图
// 正边 负边 都可以
// 记得 memset dist
/**
 * @brief 
 * 
 *      Prim 稠密图
 *          原理：最近的距离一定在MST上
 *      kruskal 稀疏图
 *          原理：最短的边一定在MST上
 */
#define rep(i,x,n) for(int i = x; i <= n; i++)

typedef long long LL;
typedef pair<int,int> PII;

const int INF = 0x3f3f3f3f;
const int N = 5021;
int n,m, ph[N][N], dist[N]; bool st[N];
void test();
int prim() {
    memset(dist,0x3f, sizeof(dist));
    int res = 0;
    for(int i = 0; i < n; ++i) {
        int t = -1;
        for(int j = 1; j <= n; ++j) {
            if(!st[j] && (t == -1 || dist[t] > dist[j])) {
                t = j;
            }
        }
        if(i && dist[t] == 0x3f3f3f3f) return 0x3f3f3f3f;
        if(i) res += dist[t];
                                            // this is 点到集合的距离
        for(int j = 1; j <= n; ++j) dist[j] = min(dist[j], ph[t][j]);
        
        st[t] = true;

    }
    return res;
}
int main()
{
    scanf("%d%d",&n,&m);
    memset(ph,0x3f, sizeof(ph));
    while(m--) {
        int a, b, c; cin>>a>>b>>c;
        ph[a][b] = ph[b][a] = min(ph[a][b], c);
    }

    int t  = prim();
    if(t == 0x3f3f3f3f) {
        puts("orz");
    } else {
        cout<<t;
    }
    return 0;
}

void test() {
    #define mytest
    #ifdef mytest
    freopen("ANSWER.txt", "w",stdout);
    #endif
}

#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <set>
#include <map>
#include <queue>
#include <stdio.h>
#include <algorithm>
using namespace std;

#define rep(i,x,n) for(int i = x; i <= n; i++)
// kruskal :
    // 将边的权重按从小到大排序，从小到大依次枚举每条边，并查集，不连通加入集合中
typedef long long LL;
typedef pair<int,int> PII;

const int INF = 0x3f3f3f3f;
const int N = 200021;
int n,m;
int p[N];
struct Edge {
    int a, b, w;
    // 方便排序
    bool operator< (const Edge &W) const {
        return w < W.w;
    }
}edges[N];
// 并查集
int find(int x) {
    if(p[x] != x) p[x] = find(p[x]);
    return p[x];
}
void test();
int main()
{
    scanf("%d%d",&n,&m);
    for(int i = 0; i < m; ++i) {
        int a,b,w; scanf("%d%d%d",&a,&b,&w);
        edges[i] = {a,b,w};
    }
    // 排序
    sort(edges, edges+m);
    int res = 0, cnt = 0;
    // 并查集初始化
    rep(i,1,n) p[i] = i;
    // 枚举
    for(int i = 0; i < m; ++i) {
        int a = edges[i].a, b = edges[i].b, w = edges[i].w;
        a = find(a), b = find(b);
        // 连通
        if(a != b) {
            res += w; cnt++; p[a] = b;
        }
    }
    // 如果cnt从1开始则为cnt < n， 但是cnt从0开始， 所以是cnt < n-1;;
    if(cnt < n - 1) puts("orz");
    else cout<<res;
    return 0;
}

void test() {
    #define mytest
    #ifdef mytest
    freopen("ANSWER.txt", "w",stdout);
    #endif
}
