#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

// 多态;
// https://www.bilibili.com/video/BV1et411b73Z?p=136&vd_source=13dfbe5ed2deada83969fafa995ccff6
// 静态多态 和 动态多态;
// 静态多态的函数地址早绑定 - 编译阶段确定函数地址；
// 动态多态的函数地址晚绑定 - 运行阶段确定函数地址;


// 纯虚函数 和 抽象类;
// 纯虚函数语法：virtual 返回值类型 函数名 (参数列表) = 0; 
// 当类中有了纯虚函数，这个类也称为 抽象类;

class Base {
public:
	// 纯虚函数:
	// 只要有一个纯虚函数，这个类就称为抽象类；
		// 特点： 无法实例化对象，Base b; 报错;
				// 抽象类的子类 必须要重写父类中的纯虚函数，否则也属于抽象类;
	virtual void func() = 0;
};

class Son: public Base {
public:
	virtual void func() {
		cout<<"这是多态啊啊啊啊啊啊啊"<<endl;
	}
};



void test2() {
	Son s;
	s.func();
	Base * base = new Son;
	base->func();
}





class Animal {
public:
	virtual void speak() {
		cout<<"动物在说话"<<endl;
	}
};

class Cat: public Animal {
public:
	void speak() {
		cout<<"小猫在说话"<<endl;
	}
};

class Dog: public Animal {
public:
	void speak() {
		cout<<"小狗在说话"<<endl;
	}
};

// 执行说话;
// 地址早绑定 在编译阶段确定函数地址;
// 如果想执行让猫说话，那么这个函数地址就不能提前绑定，
// 需要在运行期间绑定, -- 地址晚绑定

// 动态多态满足条件
	// 1 . 有继承关系
	// 2 . 子类要重写父类的虚函数;
//whit rewrite? :重写： 函数返回值类型   函数名 参数列表 完全相同;

// 动态多态 的 使用;;
	// 父类的指针 或者引用 指向子类对象

void doSpeak(Animal &animal) { // Animal &animal = cat; 
	animal.speak();
}

void test1() {
	Cat cat;
	Dog dog;
	doSpeak(cat);
	doSpeak(dog);
}

int main()
{
	test2(); 
	return 0;
}
