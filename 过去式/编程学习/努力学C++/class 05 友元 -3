#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;
// 友元;  -- > 就是让一个函数或者类 访问另一个类中的私有成员;
// 全局函数做友元;

// 类做友元;

// 类成员函数做 友元;
class Building {
    //  goodgay全局函数是 Building 好朋友，可以访问Building 中的私有成员;
    friend void goodgay(Building *building);
    //friend class GoodGay;
    friend void GoodGay::visit11();
    public:
    Building() {
        m_BedRoom = "卧室";
        m_SittingRoom  = "客厅";
    }
    string m_SittingRoom; // --- > 客厅
    private:
    string m_BedRoom; // --- > 卧室
};

class GoodGay {
public:
    GoodGay();
    void visit();
    void visit11();
    void visit22();
    string ggy;
    Building * building;
};
GoodGay::GoodGay() {
    building = new Building;
    ggy = "好基友";
};

void GoodGay::visit11() {
    cout<<"visit函数 正在访问: "<<building->m_SittingRoom<<endl;
    cout<<"visit函数 正在访问: "<<building->m_BedRoom<<endl;
}

// void GoodGay::visit() {
//     cout<<"新的好基友正在访问: "<<building->m_SittingRoom<<endl;
//     cout<<"新的好基友正在访问: "<<building->m_BedRoom<<endl;
// }


void goodgay(Building *building) {
    GoodGay a;
    cout<<a.ggy<<endl;
    cout<<"好基友这个全局函数正在访问: "<<building->m_SittingRoom<<endl;
    cout<<"好基友这个全局函数正在访问: "<<building->m_BedRoom<<endl;
    system("cls");
    a.visit();
}


void test1() {
    Building a;
    goodgay(&a);
    GoodGay b;
    b.visit11();
    
}


int main()
{
    test1();
    return 0;
}
/**
 * @file learnlab.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-06-26
 * CODE:
 * 
 * #include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

class GoodGay {
    public:
    GoodGay();
    Building* building;
    void visit();

};
using namespace std;
class Building {
    friend void GoodGay::visit();
    public:
    Building();
    string m_dfdsfdf;
    private:
    string m_ada;
};

Building::Building() {
    m_ada = "卧室";
    m_dfdsfdf = "客厅";
}


void GoodGay::visit() {
    cout<<"visit 函数访问: "<<building->m_dfdsfdf<<endl;
    cout<<"visit 函数访问: "<<building->m_ada<<endl;
}

GoodGay::GoodGay() {
    building = new Building;
}

void test1() {
    GoodGay a;
    a.visit();
}
int main()
{
    test1();
    return 0;
}
 * 
 * 
 * @copyright Copyright (c) 2022
 * 
 */
