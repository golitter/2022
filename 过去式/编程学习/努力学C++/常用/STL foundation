1、vector 变长数组，倍增的思想

    size()  返回元素个数
    empty() 返回是否为空
    clear() 清空
    front()/back() 返回第一个/最后一个数
    push_back()/pop_back() 向vector的最后插入一个数/删掉最后一个数
    begin()/end() vector的第0个数/最后一个数的后一个数
    []  支持随机寻址
    支持比较运算(字典序)

    vector<int> a(n,t);     ---定义长度为n的vector,并且将初值赋为t
    vector<int> a[10];      ---定义vector数组

    遍历方式:
        for (int i = 0; i < a.size(); i ++ ) cout << a[i] << ' ';

        for (vector<int>::iterator i = a.begin(); i != a.end(); i ++ ) cout << *i << ' ';
        //for (auto i = a.begin(); i != a.end(); i ++ ) cout << *i << ' ';

        for (auto x : a) cout << x << ' ';

2、pair<int, int> 二元组

    first       第一个元素
    second      第二个元素
    支持比较运算，以first为第一关键字，以second为第二关键字(字典序)

    pair<int, string>p;

    p = make_pair(10,"abc");
    p = {20,"def"};

3、string 字符串

    substr(m,n)    返回某个子串(m为子串的起始位置，n为长度)
    c_str()     返回对应数组的头指针

    size()/length() 返回字母个数
    empty()         返回字符串是否为空
    clear()         清空字符串


4、queue 队列

    size()      返回字母个数
    empty()     返回队列是否为空
    push()      从队尾插入 一个元素
    front()     返回队头元素
    back()      返回队尾元素
    pop()       弹出队头

5、priority_queue 优先队列（堆），默认大根堆

    push()      插入元素
    pop()       弹出堆顶元素
    top()       返回堆顶元素

    priority_queue<int> heap;

    定义成小根堆的方式：插入-x或者priority_queue<int, vector<int>, greater<int>> heap;

6、stack 栈
    size()
    empty()
    push()      向栈顶添加元素
    top()       返回栈顶元素
    pop()       弹出栈顶元素

7、deque 双端队列(队头队尾均可插入与删除)

    size()      返回元素个数
    empty()     返回队列是否为空
    clear()     清空队列
    front()     返回队头元素
    back()      返回队尾元素
    push_back()/pop_back()      队尾插入/弹出元素
    push_front()/pop_front()    队头插入/弹出元素
    begin()/end()
    []


8、set,map 基于平衡二叉树(红黑树)---动态维护有序序列

    size()
    empty()
    clear()
    begin()/end()

    set/multiset
        set中不能有重复元素
        multiset中可以有重复元素

        insert()        插入一个数
        find()          查找一个数，不存在返回end()迭代器
        count()         返回某一个数的个数
        erase() 
            1.输入是一个数x, 删除所有x
            2.输入是一个迭代器, 删除迭代器
        lower_bound()/upper_bound()     
            lower_bound(x)  返回大于等于x的最小的数的迭代器
            upper_bound(x)  返回大于x的最小的数的迭代器

        set<int> s;
        multiset<int> ms;

    map/multimap //map映射（a->b）
        insert()    插入的是一个pair
        erase()     输入的的参数是pair或者迭代器
        find()
        []
        lower_bound()/upper_bound()

        map<string, int> m;
        m["abc"] = 1;
        cout << m["abc"] << endl;



9、unordered_set,unprdered_map,unordered_multiset,unordered_multimap 基于哈希表实现

    和上面类似，但是不支持lower_bound()/upper_bound()

10、bitset 压位
    bitset<1000> s;
    ~s, &, |, ^
    >>, <<, ==, !=
    []

    count() 返回有多少个1

    any()   判断是否至少有一个1
    none()  判断是否全为0

    set()   把所有位置为1
    set(k,v) 将第k位置为v
    reset() 把所有位置为0
    flip()  把所有位取反
    filp(k) 把k位取反
