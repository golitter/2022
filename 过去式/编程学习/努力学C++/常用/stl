//STL vector, stack, queue, list;
#include <bits/stdc++.h>
using namespace std;
void output(int n) {
    cout<<n<<" ";
}
    /**
     * @brief 
     * 二维vector初始化;
     * vector<vector<int> > darr(row, vector<int>(column,0)) -- > (column,0) Init...
     */
/**
 * @brief [a.begin(), a,end()); 随机访问;
 * 总结：
 * 模板类vector, list, queue, stack 均适用 （以vector 为例子）：
 * vector<int> vt; // 空表;
 * vector<int> vt(n,t) //创建n个值为k的：
 * vt.insert(p, t) // 在p前插入t：
 * vt.insert(p, n, t) // 将n个t插入p前;
 * vt.insert(p, i, j) // 将区间[i, j) 元素插入p前;
 * vt.erase(p)// 删除p指向的元素;
 * vt.erase(p,q) // 删除[p, q) 的元素;
 * vt.clear()// 清除;
 * vt.empty()// null : true or noNull : false;
 * vtctor:
 * vt.push_back(item);
 * 
 * stack,list,queue:
 * 均为链表形式;
 * stack: 链表的头插法;
 * queue: 链表的尾插法;
 * list: 双向链表：
 * 有：
 * a.push(item);
 * a.top();
 * a.pop();
 * a.front();
 * a.push_back(item);
 * a.push_front(item);
 * a.front();
 * a.back();
 */
int main()
{
    // vector;
    // statement;
    vector<int> vt;
    vector<int> vt1(10);
    vector<int> vt2(10,1);
    for(int i = 0; i < 10; i++) {
        vt1.push_back(i); // 在末尾加，赋值;
    }
    for(int i = 0; i < 10; i++) cout<<vt1[i+10]<<" ";
    cout<<endl;
    for_each(vt1.begin()+10,vt1.end(),output);//前两个表示区间的迭代器，后一个表示指向函数的指针（函数对象;可适用于任何容器;
    cout<<endl;
    int as[4] = {1,3,4,5};
    for_each(as,as+4,output);// 也适用于普通数组;
    cout<<endl;
    // 基于范围的for循环; 适用于C++11;

    vt1.erase(vt1.begin()+10,vt1.begin()+12);
    for_each(vt1.begin()+10,vt1.end(),output);
    cout<<endl;// 删除区间： [begin, end);
    vt1.erase(vt1.begin()+10);
    for_each(vt1.begin()+10,vt1.end(),output); 
    cout<<endl;//删除单一;

    vector<int>::iterator pd = vt1.begin()+10;// 迭代器：广义指针;
    for(pd = vt1.begin()+10; pd < vt1.end(); pd++) cout<<*pd;
    cout<<endl;
    
    vt1.insert(vt1.begin()+10,45);
    for_each(vt1.begin()+10,vt1.end(),output);
    vt1.insert(vt1.begin()+10,2,23);// 将 2 个 23 插入到begin之前;
    for_each(vt1.begin()+10,vt1.end(),output);
    vt1.insert(vt1.begin()+10,vt1.begin(),vt1.begin()+2); //begin i j) 将区间i to j add to begin之前;
    for_each(vt1.begin()+10,vt1.end(),output);
    vt1.insert(vt1.begin()+10,as,as+4);
    cout<<endl;
    for_each(vt1.begin()+10,vt1.end(),output); //同 begin i j  from i to j add to begin 之间;
    cout<<endl;
    //vt1.clear();// 清除；
    //vt1.size() 元素个数;
    //vt1.reverse(vt1.begin(),vt1.end());//反转；
    //vt1.empty();// 是否为空。空返回true， 否则返回false;
    //sort(vt1.begin(),vt1.end());// 从小到大排序 快排;

    //Stack;
    stack<int>st;
    for(int i = 1; i < 10; i++) st.push(i); //入栈：
    while(!st.empty()) {
        cout<<st.top()<<" ";// 出栈;
        st.pop(); // 删除栈顶元素;
    }
    cout<<endl;

    //Queue;
    queue<int> qu;
    for(int i = 0; i < 10; i++) qu.push(i);
    while(!qu.empty()) {
        cout<<qu.front()<<" ";
        qu.pop();
    }
    cout<<endl;

    //List;不支持数组表示法和随机访问;
    list<int> li1;
    for(int i = 1; i < 10; i++) {
        li1.push_back(i);// 尾插法;
    }
    for_each(li1.begin(),li1.end(),output);
    cout<<endl;
    for(int i = 1; i < 10; i++) {
        cout<<li1.front();
        li1.pop_front();
    }
}
