#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
#include <cstring>
using namespace std;
// 成员变量 和 成员函数 分开存储的
class Person {

// 空对象占用内存空间为：1；
// C++ 编译器会给每一个空对象也分配一个字节空间，是为了区分空对象站内存的位置;
// 每一个空对象也应该有一个独一无二的内存地址;

// this指针
// 1，解决名称冲突
// 2，返回对象本身用*this；

// 空指针 调用成员函数

// 常函数 常对象
public:
    int m_A;
    static int _A;
    mutable int m_B;
    // this指针的本质 是指针常量 指针的指向是不可修改的】
    // Person * const this;
    void Const() const { // equal -- const Person *const this; // this也不可修改
        m_B = 34;
        // mutable int m_B; 比较特殊，在常函数和常对象都可以修改
    }
    void Show1() {
        cout<<"SHOW one"<<endl;
    }
    void Show2() {
        cout<<"SHOW two"<<endl;
        if(this == NULL) return ;
        cout<<this->age<<endl;
    }
    Person(int age) {
        // this指针指向 被调用的成员函数 所属的对象
        this->age = age;
        // p->age = age;
        }
    void func() {
        cout<<"dlkfjdslkfj";
    }
    // Person NOT：& 则创一个新值；
    Person& PerAgeAdd(Person &p) {
        this->age += p.age;
        p.age = 300;
        return *this;
    }
    int age;
    // 常对象
    // const Person p; p.m_A NOT change;
};
// 返回*this
int Person::_A = 34;
int main()
{
    Person p(3);
    cout<<sizeof(p)<<endl;
    cout<<p.age<<endl;
    Person k(17);
    // 链式编程;
    p.PerAgeAdd(k).PerAgeAdd(k).PerAgeAdd(k);
    cout<<p.age<<endl;
    Person* pp = NULL;
    pp->Show1();
    pp->Show2();
    const Person k3(3); // -- 常对象 、、 常对象不可以调用普通函数，但是可以调用常函数；
    return 0;
}
