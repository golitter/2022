#include <iostream>
#include <vector>
#include <functional>
#include <algorithm>
#include <algorithm>
using namespace std;
// 返回bool类型的仿函数称为谓词;
// if operator(1) 一元谓词 (1,2) 二元谓词
class GreatFive{
public:
    bool operator()(int val) {
        return val > 5;
    }
};
class MySort{
public:
    bool operator()(int a, int b) {
        return a > b;
    }
};
void test1() {
    vector<int> v;
    for(int i = 0; i < 10; ++i) v.push_back(i);
    v.push_back(-34);
    
    // 查找大于五的数
    // GreatFive() 匿名对象
    auto a = find_if(v.begin(), v.end(), GreatFive());
    if(a != v.end()) cout<<*a<<endl;
    // 使用函数对象，改变排序规则，从大到小
    sort(v.begin(), v.end(), MySort());
    cout<<"-----------------------"<<endl;
    for(auto &a: v) cout<<a<<" ";
    puts("");
}
// 内建函数对象
// 算数仿函数，关系仿函数，逻辑仿函数
// 用法和一般函数相同，需要 #include <functional> 
// 算数仿函数
    // negate 一元仿函数，取反仿函数
    // plus 二元仿函数 加法
// 关系仿函数;
    // greater  大于
// 逻辑仿函数
    // logical_not
void testtt() {
    negate<int> n;
    cout<<n(50)<<endl;
    plus<int>p;
    cout<<p(34,43)<<endl;
    vector<int> v;
    v.push_back(34), v.push_back(34324), v.push_back(1);
    sort(v.begin(), v.end(), greater<int>());
    for(auto &a: v) cout<<a<<" ";
    puts("");
    vector<bool>vv;
    vv.push_back(true);
    vv.push_back(false);
    // 利用逻辑非，将v搬运到v2，并执行取反
    vector<bool>v2;
    v2.resize(v.size());
    transform(vv.begin(),vv.end(),v2.begin(),logical_not<bool>());
}
int main()
{
    testtt();
}
