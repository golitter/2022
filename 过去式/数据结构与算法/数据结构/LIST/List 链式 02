//链表的链式存储:
//带头结点的链表；
// L or *L;
// 如何选择和应用；
//什么时候LinkList s 需要malloc? 好像解决了;;
#include <stdio.h>
#include <stdlib.h>
typedef int elem;
typedef struct LNODE {
  elem data;
  struct LNODE* Next;// 指针域 //链表下一个结点的地址
}List,*LinkList;//List == struct LNODE; LinkList == struct LNODE*;

//初始化：initList;
LinkList InitList() {
  LinkList p = (LinkList)malloc(sizeof(struct LNODE));
  p->Next = NULL; //带头结点的空链表
  return p;
}
//insert Link 插入；
LinkList InsertList(LinkList L, elem X, int thenum) {   // 在头指针为L的链表中的第thenum个结点之前插入结点;
  LinkList p = L;
  LinkList s;
  int j = 1;
  while(p->Next != NULL && j < thenum) {
    p = p->Next;
    j++;
  }
  if(j != thenum) {
    printf("thenum超过了链表的长度\n");
    return NULL;
  }
  s = (LinkList)malloc(sizeof(List));
  if(s == NULL) {
    printf("没有足够的空间");
    return NULL;
  }
  s->data = X;
  s->Next = p->Next;
  p->Next = s;
  return L;
}

// 删除结点;
LinkList DeleteList(LinkList L, int thenum) { // 删除thenum元素;
  LinkList p,q;
  q = L;
  p = q->Next;
  while(p != NULL && thenum != p->data) {
    q = p;
    p = p->Next;
  }
  if(p == NULL) {
    printf("值不存在");
    return NULL;
  } else {
    q->Next = p->Next;
    free(p);
  }
  return L;
}

//有多少元素：
int HMElem(LinkList L) {
  int j = 0;
  L = L->Next;
  while(L) {
    j++;
    L = L->Next;
  }
  return j;
}

//头插法：
void HeadInsert(LinkList L, int thenum) { // 加*和不加*一样都可以·；跟L 和*L有什么关系呢？
  LinkList kk = (LinkList)malloc(sizeof(List));
  //kk = L;
  for(int i = 0; i < thenum; i++) {
    LinkList p = (LinkList)malloc(sizeof(List));
    scanf("%d",&p->data);
    p->Next = L->Next;
    L->Next = p;
  }
}
//后插法：
void TailInsert(LinkList L, int thenum) {
  LinkList end;
  end = (LinkList)malloc(sizeof(List));
  end = NULL;
  end = L;
  for(int i = 0; i < thenum; i++) {
    LinkList p = (LinkList)malloc(sizeof(List));
    scanf("%d",&p->data);
    p->Next = end->Next;
    end->Next = p;
    end = p;
  }
  //L = end;
}

// output:
void Output(LinkList L) {
  LinkList temp = L;
  // while(temp) {    
  //   temp = temp->Next;//带头结点，

  //   printf("%d ",temp->data);
  // }
  //也可以这样；
  temp = temp->Next;
  while(temp) {
    printf("%d ",temp->data);
    temp = temp->Next;
  }
  printf("\n");
}

// 
LinkList Build(int n) {
  LinkList head = (LinkList)malloc(sizeof(List));
  head->Next = NULL;
  for(int i = 0; i < n; i++) {
    LinkList p = (LinkList)malloc(sizeof(List));
    scanf("%d",&p->data);
    p->Next = head->Next;head->Next = p;
  }
  return head;
}
int main()
{
  LinkList ptrl; //statement;

  //ptrl = Build(4);
  ptrl = InitList();// initial

  //HeadInsert(ptrl, 4);// head insert
  TailInsert(ptrl,4);// tail insert 
  Output(ptrl);//output;

  int count = HMElem(ptrl);// count;
  printf("%d\n",count);

  ptrl = InsertList(ptrl, 10,2);//add;

  Output(ptrl);// output;

  printf("%d\n",HMElem(ptrl));//count;

  ptrl = DeleteList(ptrl,4);//delete

  Output(ptrl);//output;

  printf("%d",HMElem(ptrl));//count;
}
