记忆方法：

树

BFS: queue --> 马的遍历    *NOTICE: bfs 最短路

DFS: stack/递归 --> 红细胞数

BFS template

feet[] -- 步数   ph[] -- 图/路径   st[] -- bool 

typedef pair<int, int> PII;
const int N = 1021;
int feet[N][N], ph[N][N];
bool st[N][N];
queue<PII> qii;
PII pt[4] = {};
while(!qii.empty()) {
    int x , y = front(). first / second;
    qii.pop();
    for(条件遍历) {
        if(不满足条件) continue;
        执行
        qii.push(make_pair(x1,y1));
    }
}

DFS template

void Search(int k)
　{
　for (i=1;i<=算符种数;i++)
　　if (满足条件)
　　   {
　　　　保存结果
　　　　if (到目的地) 输出解;
　　　           else Search(k+1);
　　　　恢复：保存结果之前的状态{回溯一步}
　 　  }
}

#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> PII;
queue<PII> qii;
int feet[1021][1021];
char ph[1021][1021];
bool st[1021][1021];
PII pt[4] = {
    {0,1}, {0,-1}, {1,0}, {-1,0}
};
int main()
{
    int n;
    cin>>n;
    for(int i = 1; i <= n; ++i) {

            scanf("%s", ph[i]);

    }
    int stx, sty, edx, edy;
    cin>>stx>>sty>>edx>>edy;

    st[stx][sty] = true;
    qii.push(make_pair(stx, sty));
    while(!qii.empty()) {
        int x = qii.front().first, y = qii.front().second;
        qii.pop();
        for(int i = 0; i < 4; ++i) {
            int lx = x + pt[i].first, ly = y + pt[i].second;
            if(lx < 1 || ly < 1 || lx > n || ly > n || st[lx][ly] || ph[lx][ly] == '1') continue;
            st[lx][ly] = true;
            feet[lx][ly] = feet[x][y] + 1;
            if(lx == edx && ly == edy) {
                cout<<feet[lx][ly];
                return 0;
            }
            qii.push(make_pair(lx, ly));
        }

    }
    cout<<"-1";
    return 0;
}
