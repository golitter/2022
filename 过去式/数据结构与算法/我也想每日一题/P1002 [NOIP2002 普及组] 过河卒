//AC:
#include <bits/stdc++.h>

using namespace std;
long long board[34][34];
long long dp[34][34];

int main()
{
    long long n,m,x,y;
    cin>>n>>m>>x>>y;
    n++; m++; x++; y++; // 13 line to 29 line is sign where the horse can reach; //tag 
    board[x][y] = 1;
    if(x-1 >= 1) {
        if(y-2 >= 1) board[x-1][y-2] = 1;
        if(y+2 <= m) board[x-1][y+2] = 1;
    }
    if(x+1 <= n) {
        if(y-2 >= 1) board[x+1][y-2] = 1;
        if(y+2 <= m) board[x+1][y+2] = 1;
    }
    if(x-2 >= 1) {
        if(y-1 >= 1) board[x-2][y-1] = 1;
        if(y+1 <= m) board[x-2][y+1] = 1;
    }
    if(x+2 <= n) {
        if(y-1 >= 1) board[x+2][y-1] = 1;
        if(y+1 <= m) board[x+2][y+1] = 1;
    }
    dp[1][1] = 1;// equal (0,0) is 1;
    for(long long i = 1; i <= n; i++) { // dynamic programming ?
        for(long long j = 1; j <= m; j++) {
            if(i == 1 && j == 1) {
                continue;
            }
            if(board[i][j] == 0) { // when not tag 
                dp[i][j] = dp[i-1][j]+dp[i][j-1];
            }
        }
    }
    cout<<dp[n][m];
}

/*
  Actually, I first started using Recursion, but runtime over ,
  just is that :
  #include <bits/stdc++.h>

using namespace std;
const int SIZE = 33;
long long board[SIZE][SIZE];
int n,m,x,y;
    int i = 0;
inline void walk(int a, int b) {
    if(a+1 == n && b == m) {
        i++;
        return ;
    }
    if(a == n && b+1 == m) {
        i++;
        return ;
    }
    if(board[a+1][b] == INT_MAX && a+1 <= n) {
        
        // if(a+1 == n) {
        //     if(b == m) {
        //          i++; return ;
        //     }
        //     else {
        //         walk(a+1,b);
        //     }
        // }
        // else {
             walk(a+1,b);
        //}
    }
    if(board[a][b+1] == INT_MAX && b+1 <= m) {
        
        // if(b+1 == m) {
        //     if(a == n) {
        //         i++; return ;
        //     }
        //     else {
        //         walk(a,b+1);
        //     }
        // }
        // else {
            walk(a,b+1);
        //}
    }
}

int main()
{

    scanf("%d%d%d%d",&n,&m,&x,&y);//cin>>n>>m>>x>>y;
    for(int z = 0; z <= n; z++) {
        for(int s = 0; s <= m; s++) board[z][s] = INT_MAX;
    }
    board[x][y] = 0;
    //build except horse (x,y) and it step;
    if(x-1 >= 0) {
        if(y-2 >= 0) board[x-1][y-2] = 0;
        if(y+2 <= m) board[x-1][y+2] = 0;
    }
    if(x+1 <= n) {
        if(y-2 >= 0) board[x+1][y-2] = 0;
        if(y+2 <= m) board[x+1][y+2] = 0;
    }
    if(x-2 >= 0) {
        if(y-1 >= 0) board[x-2][y-1] = 0;
        if(y+1 <= m) board[x-2][y+1] = 0;
    }
    if(x+2 <= n) {
        if(y-1 >= 0) board[x+2][y-1] = 0;
        if(y+1 <= m) board[x+2][y+1] = 0;
    }
    

    walk(0,0);
    cout<<i;
}
I keep changing the input and output streams, and some Circulation,
but I do not find the key, that is the Recursion is not efficient, so I wasted a lot of time in its;
When I look at the someone answer , I find I am fool, wa
why I do not find dp? why?
analysis:
I do not think more easy answer about it, only solve my first sence;
and I may be conceited , 
Don't try anotheridea,also may I do not understand what is dp;
I will work hard;
come on!
this is my first a daily topic;
*/
