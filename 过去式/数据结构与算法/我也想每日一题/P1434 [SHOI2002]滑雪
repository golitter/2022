/**
 * @file Untitled-3
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-03-18
 * 
 * @copyright Copyright (c) 2022
 * DFS and BFS
 * DFS: Depth - First Search; usual Recursion;
 * BFS: Breadth - First Search; uaual Queue;
 * https://www.cnblogs.com/kungfupanda/p/11248014.html
 */
#include <bits/stdc++.h>
using namespace std;
int dir[4][2] = { // Four direction; it is laconic;
    {0,1},
    {0,-1},
    {1,0},
    {-1,0}
};
#define CHECK(x, y) (x < Bx && x >= 0 && y < By && y >= 0) // Preprocessing instruction; NOT {}!!!
int Bx, By, ans;
int Stage[101][101], s[101][101];
int dfs(int a, int b) { // Recursion; 
    if(s[a][b]) {
        return s[a][b];
    }
    s[a][b] = 1;
    for(int i = 0; i < 4; i++) { // DFS;;; up, down, right, left;
        int aa = a + dir[i][0];
        int bb = b + dir[i][1];
        if(CHECK(aa, bb) && Stage[a][b] > Stage[aa][bb]) {
            dfs(aa,bb);
            s[a][b] = max(s[a][b], s[aa][bb]+1);
        }
    }
    return s[a][b];

}
int main()
{
    cin>>Bx>>By;
    for(int i = 0; i < Bx; i++) {
        for(int j = 0; j < By; j++) {
            scanf("%d",&Stage[i][j]);
        }
    }
    for(int i = 0; i < Bx; i++) {
        for(int j = 0; j < By; j++) {
            ans = max(ans,dfs(i,j));
        }
    }
    cout<<ans;
}
