// LCS:
/**
 * @file Untitled-3
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-03-27
 * 
 * @copyright Copyright (c) 2022
 * Trace of LCS use stack is good;
 * Now I find the algorithm of STL ,such as list, stack and queue is very handy;
 * retrospect stack: stcak<int>in, in.push(item), in.top(), in.pop();in.size(); in.empty();
 * Walala ....;
 * I like the stack;
 */
#include <iostream>
#include <cstring>
#include <stack>
using namespace std;
int dp[3002][3002]; 
string a,b;
stack<char>suftrav;
void Trace(int aa, int bb) {
    if(aa == 1 && bb == 1) {
        return ;
    }
    if(a[aa-1] == b[bb-1]) {
        suftrav.push(a[aa-1]); // stack STL; is significant
        aa--;
        bb--;
    } else {
        if(dp[aa-1][bb] >= dp[aa][bb-1]) {
            aa--;
        } else {
            bb--;
        }
    }
    Trace(aa,bb);
}
int main()
{
   
    cin>>a>>b;
    a.insert(0," ");
    b.insert(0," ");
    int alength = a.size(), blength = b.size();
    for(int i = 1; i <= alength; i++) {
        for(int j = 1; j <= blength; j++) {
            if(a[i-1] == b[j-1]) {
                dp[i][j] = dp[i-1][j-1] + 1;
            } else {
                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
            }
        }
    }
    Trace(alength,blength);
    while(!suftrav.empty()) { // become more laconic;;
        cout<<suftrav.top();
        suftrav.pop();
    }
}
