// trie 字典树 用来高效的存储和查找字符串集合的数据结构
#include <bits/stdc++.h>
using namespace std;

const int N = 100021;
const son[N][26], cnt[N], idx; // 下标是0的点，既是根节点，又是空节点
void insert(char  str[]) {
    int p = 0;
    for(int i = 0; str[i]; ++i) {
        int u = str[i] - 'a';
        if(!son[p][u]) son[p][u] = ++ idx;
        p = son[p][u];
        cnt[p]++;
    }
    //cnt[p]++;  *************************************
}
int query(char str[]) {
    int p = 0;
    for(int i = 0; str[i]; ++i) {
        int u = str[i] - 'a';
        if(!son[p][u]) return 0;
        p = son[p][u];
    }
    return cnt[p];
}
// 并查集：
// 1，将两个集合合并
// 2，询问两个元素是否在一个集合中
// 基本原理：每个集合用一颗树表示，。树根的编号就是整个集合的编号，每个节点存储它的父节点，p[x]表示x的父节点

int find(int x) { // 返回x的祖宗节点 + 路径压缩
    if(p[x] != x) p[x] = find(p[x]);
    return p[x];
}
// question1: 如何判断树根：if(p[x] == x);
// 如何求x的集合编号：while(p[x] != x) x = p[x];
// 如何合并两个集合：px是x的集合编号，py是y的集合编号。p[x] = y;
// 路径压缩
void CheckandSet() {
    int p[N]; // [] = 000;
    int n, m;
    for(int i = 1; i <= n; ++i) p[i] = i;
    while(m--) {
        char op[2];
        int a, b;
        cin>>op>>a>>b;
        if(op[0] == 'M') p[find(a)] = find(b);
        else {
            if(find(a) == find(b)) {
                cout<<"Y";
            }
        }
    }
}

需要包含 <numeric>
	// this is my updated code;
struct CKST {
	vector<int> p;
	// 构造函数 初始化
		// iota 给容器递增初始化赋值
	CKST(int n): p(n+1) { iota(p.begin(),p.end(),0); }

	// 查找 + 路径压缩
	int find(int x) {return p[x] == x ? x: p[x] = find(p[x]); }
	// 连通   						this is ====
	void uni(int x, int y) {p[find(x)] = find(y); }
	// 判断是否 连通
	bool same(int x, int y) {return find(x) == find(y); }

};
	// this is tourist
struct DSU { //并查集模板

  vector<int> p;

  DSU(int n) : p(n + 1) { iota(p.begin(), p.end(), 0); }

  int find(int x) { return p[x] == x ? x : p[x] = find(p[x]); }

  void uni(int x, int y) { p[find(x)] = find(y); }

  bool same(int x, int y) { return find(x) == find(y); }

};





// 如何手写一个堆 堆 -- 完全二叉树
int h[N],size;
// 插入一个数
heap[++ size] = x; up(size);
// 求集合当中的最小值
heap[1];
// 删除最小值
heap[1] = heap[size];size--;down(1);
// 删除任意一个元素
heap[k] = heap[size]; size--; up(k); down(k);;
// 修改任意一个元素
heap[k] = num; up(k); down(k);
// 存储 root 1   left-son 2*x; right-son 2*x + 1;
// down and up function

void down(int u) {
    int t = u;
    if(u*2 <= size && h[u*2] < h[t]) t = u*2;
    if(u*2 + 1 <= size &&h[u*2 + 1] < h[t]) t = u*2 + 1;
    if(u != t) {
        swap(h[u], h[t]);
        down(t);
    }
}

void up(int u) {
    while(u/2 && h[u/2] > h[u]) {
        swap(h[u/2], h[u]);
        u /= 2;
    }
}

int Heap() {
    int n, m;
    for(int i = 1; i <= n; ++i) cin>>h[i];
    size = n;
    for(int i = n/2; i; i--) {
        down(i);
    }
    while(m--) {
        cout<<h[1]<<" ";
        h[i] = h[size];
        size--;
        down(1);
    }
}

int main()
{

}
