/**
 * @file Untitled-2
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-03-19
 * 
 * @copyright Copyright (c) 2022
 * memcpy structure & arrary
 * structure : must add &;
 * and arrary: not add &;
 * Cantor Expansion:康托展开：全排序，按字典序进行排序，查找是第几大的顺序；
 *NOTICE:input should convert data type
 from character convert digit;
 
 */
#include <bits/stdc++.h>
const int LEN = 362880; 
using namespace std;
#define CHECK(x, y) (x < 3 && x >= 0 && y < 3 && y >= 0)
int n = 9;
struct node {
    int state[9];
    int dis;
};

int dir[4][2] = {
    {-1,0},
    {0,-1},
    {1,0},
    {0,1}
};
long int visited[LEN+1] = {0};
int start[9];// start state
int goal[9] = {1,2,3,8,0,4,7,6,5};//aim state;
long int factory[] = {1,1,2,6,24,120,720, 5040, 40320, 362880};

bool Cantor(int str[], int n) {//Cantor Expansion: judge if repetition
    long result = 0;
    for(int i = 0; i < n; i++) {
        int counted = 0;
        for(int j = i+1; j < n; j++) {
            if(str[i] > str[j]) {
                ++counted;
            }
        }
        result += counted*factory[n - i - 1];
    }
    if(!visited[result]) {
        visited[result] = 1;
        return 1;
    } else {
        return 0;
    }
}

int bfs() {
    struct node head;
    memcpy(head.state,start,sizeof(head.state));
    head.dis = 0;
    queue<struct node> q;
    Cantor(head.state,9);
    q.push(head);

    while(!q.empty()) {
        head = q.front();
        if(memcmp(head.state,goal,sizeof(goal)) == 0) {
            return head.dis;
        }
        q.pop();
        int z;
        for( z = 0; z < 9; z++) {
            if(head.state[z] == 0) break;
        }
        //covert two-dimension (0,0) begin;
        int x = z%3;// 横坐标；
        int y = z/3;// 纵坐标;
        for(int i = 0; i < 4; i++) {
            int newx = x + dir[i][0];// up down left right;
            int newy = y + dir[i][1];
            int nz = newx + newy*3;// two-dimension arrary become one-dimension arrary;
            if(CHECK(newx, newy)) 
            //if(newx >= 0 && newx<3 && newy>=0 && newy<3)
            {// judge if in the scope;
                struct node newnode;
                memcpy(&newnode,&head, sizeof(struct node));// NOTICE:& ,because the memcpy is void*;;;//structure copy must add &, and uaual arrary not add &;
                swap(newnode.state[z], newnode.state[nz]);// zero move to nz; new space;
                newnode.dis++;
                if(Cantor(newnode.state,9))  
                q.push(newnode);
            }
        }
    }
    return -1;
}

int main()
{
    char ch[9];
    for(int i = 0; i < 9; i++) {
        cin>>ch[i];
        start[i] = ch[i] - '0';
    }
    int ans = bfs();
    if(ans == -1) cout<<"asfas";
    else 
    cout<<ans;
}
