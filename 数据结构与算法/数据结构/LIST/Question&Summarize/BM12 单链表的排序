/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 */

class Solution {
public:
    /**
     * 
     * ease;
     * 
     * @param head ListNode类 the head node
     * @return ListNode类
     * Merge sort;
     * Fantastic step is how get mid and merge, and about it, can declare three list, left, mid and right;
     * right two steps, left and right one step
     * So can find mid;
     * left->next = NULL; this is say, has two list;;;
     * The Tail Interpolation UPDATE:
     * head list : has headNode : head->next = NULL of head = new List(-1);
     * tail = head;
     * tail->next = q;
     * q = q->next;
     * tail = q;
     * Right!
     * 
     */
    ListNode* Merge(ListNode*head2, ListNode* head1) {
        if(head1 == NULL) {
            return head2;
        }
        if(head2 == NULL) {
            return head1;
        }
        ListNode *head = new ListNode(-1);
        ListNode *cur = head;
        while(head1 && head2) {
             if(head1->val <= head2->val) {
                 cur->next = head1;
                 head1 = head1->next;
             } else {
                 cur->next = head2;
                 head2 = head2->next;
             }
             cur = cur->next; // convenient
        }
        cur->next = head1?head1:head2;
        return head->next;
    }
    ListNode* sortInList(ListNode* head) {
        // write code here
        if(head == NULL) {
            return head;
        }
        if(head->next == NULL) {
            return head;
        }
        ListNode *Left, *Right, *Mid;
        Left = head;
        Mid = Left->next;
        Right = Mid->next;
        while(Right && Right->next) {
            Left = Mid;
            Mid = Mid->next;
            Right = Right->next->next;
        }
        Left->next = NULL;
        return Merge(sortInList(head),sortInList(Mid));
    }
};
