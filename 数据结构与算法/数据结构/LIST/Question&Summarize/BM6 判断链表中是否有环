/**
 * @file Untitled-9
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-03-20
 * 
 * @copyright Copyright (c) 2022
 * METHOD:
 * use Double Pointer;
 * step one:
 *          check whether it is empty;
 * step two:
 *          declare two pointers, one as fast pointer , the other as slow pointer;
 * step three:
 *          slow pointer walk one step, and fast pointer walk two steps; OF COURSE , need to check fast pointer whether it is NULL;
 * if slow pointer equal to fast pointer ,then return true;
 * Loop end, if do not has slow pointer equal to fast pointer , then will return false;
 */
#include <stdbool.h>
/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */

/**
 * 
 * @param head ListNode类 
 * @return bool布尔型
 */
bool hasCycle(struct ListNode* head ) {
    // write code here
    if(head == NULL) return false;
    struct ListNode *fast, *slow;
    slow = head;
    fast = head;
    while(fast != NULL &&fast->next != NULL) {
        fast = fast->next->next;
        slow = slow->next;
        if(slow == fast) {
            return true;
        }
    }
    return false;
}
