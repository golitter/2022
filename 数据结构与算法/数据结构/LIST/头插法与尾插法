/**
 * @file Untitled-1
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-03-17
 * 
 * @copyright Copyright (c) 2022
 * 头插法 尾插法：
 * 头插法 ：向左移动； :?先进后出 stack
 * 尾插法： 向右移动； :?先进先出 queue
 * 
 * 链表 ： 有头结点， 无头结点；
 * 两者差不多: 头插法相同，尾插法，无头结点首先加一个值，凑成有结点的即可；
 * 
 */
#include <bits/stdc++.h>
using namespace std;
typedef struct list{
    int val;
    struct list *next;
}List, *LinkList;
int main()
{
    // 首先，有头结点的头插法：
    LinkList HaveHeadPre;
    HaveHeadPre = new(List);
    HaveHeadPre->next = NULL; // 有头结点的空链表;
    for(int i = 1; i <= 5; i++) {
        LinkList q;
        q = new(List);
        q->val = i;
        q->next = HaveHeadPre->next; // 个人感觉像是q在HaveHeadPre的左面，q的下一个结点指向NULL,
        HaveHeadPre->next = q;  // 之后，HaveHeadPre->next的结点指向q, 一直往复进行；
    }
    HaveHeadPre = HaveHeadPre->next;
    while(HaveHeadPre) {
        cout<<HaveHeadPre->val<<" ";
        HaveHeadPre = HaveHeadPre->next;
    }
    cout<<endl;

    // 之后，有头结点的尾插法；
    LinkList HaveHeadSuf; 
    HaveHeadSuf = new(List); // 有头结点的空链表；
    HaveHeadSuf->next = NULL;
    LinkList Tail;
    Tail = HaveHeadSuf; // 用Tail进行遍历，因为地址会变；，若用HaveHeadSuf遍历，则最后为尾指针；
    for(int i = 1; i <= 5; i++) {
        LinkList q1 = new(List);
        q1->val = i;
        q1->next = Tail->next; // 相当于q1向右移动；
        Tail->next = q1; // 这一行与上面一行不要弄混，不然地址会变；
        Tail = q1;
    }
    HaveHeadSuf = HaveHeadSuf->next;
    while(HaveHeadSuf) {
        cout<<HaveHeadSuf->val<<" ";
        HaveHeadSuf = HaveHeadSuf->next;
    }
    cout<<endl;

    // 无头结点的头插法；
    LinkList NoHeadPre;
    NoHeadPre = new(List);
    NoHeadPre = NULL;
    for(int i = 1; i <= 6; i++) {
        LinkList q2 = new(List);
        q2->val = i;
        // if(NoHeadPre == NULL) {
        //     q2->next = NoHeadPre;
        //     NoHeadPre = q2;
        // } else {
        //     q2->next = NoHeadPre;
        //     NoHeadPre = q2;
        // }
        q2->next = NoHeadPre;
        NoHeadPre = q2;
    }
    while(NoHeadPre) {
        cout<<NoHeadPre->val<<" ";
        NoHeadPre = NoHeadPre->next;
    }
    cout<<endl;

    // 无头结点的尾插法；
    LinkList NoHeadSuf;
    NoHeadSuf = new(List);
    NoHeadSuf = NULL;
    LinkList tail;
    tail = NoHeadSuf;
    for(int i = 0; i < 10; i++) {
        LinkList q3 = new(List);
        q3->val = i;
        if(tail == NULL) {
            // q3->next = tail;
            // tail->next = q3;
            // tail = q3;
            // NoHeadSuf = q3;
            tail = q3;
            NoHeadSuf = q3;// Q3   (插入)  NULL;
            tail->next = NULL;//相当于带了头结点；,而且头结点对应的val有数值，不为空；
        } else {
            q3->next = tail->next; // 下面跟有结点的尾插法一样； 
            tail->next = q3;
            tail = q3;
        }
    }
    while(NoHeadSuf) {
        cout<<NoHeadSuf->val<<" ";
        NoHeadSuf = NoHeadSuf->next;
    }
}
