#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
#include <typeinfo>
using namespace std;

// 类模板成员函数类外实现
// 总结：类模板中成员函数类外实现时，需要加上模板参数列表
template<class T1, class T2>
class Person {
public:
    Person(T1 name, T2 age) ;//{
    //     this->m_Name = name;
    //     this->m_Age = age;
    // }
    void showPerson() ;//{
    //     cout<<"姓名："<<this->m_Name<<" 年龄："<<this->m_Age<<endl; 
    // }
    T1 m_Name;
    T2 m_Age;
};
// 构造函数的类外实现:
template<class T1, class T2>
Person<T1, T2>::Person(T1 name, T2 age) {
    this->m_Name = name;
    this->m_Age = age;
}
// 成员函数类外实现
template<class T1, class T2>
void Person<T1, T2>::showPerson() {
    cout<<"姓名："<<this->m_Name<<" 年龄："<<this->m_Age<<endl; 
}
void test01() {
    Person<string, int> P("Tom", 33);
    P.showPerson();
}

// 类模板与继承
// and 总结：如果父类是类模板，子类需要指定出父类的T的数据类型
template<class T>
class Base {
    T m;
};
//class Son: public Base { // ERROR: 必须要知道父类中T的类型，才能继承给子类
class Son: public Base<int> {
};
// 如果想灵活指定父类中T类型，子类也需要变类模板
template<class T1, class T2>
class Son2 : public Base<T2> {
public:
    Son2() {
        cout<<"T1的类型为："<<typeid(T1).name()<<endl;
        cout<<"T2的类型为："<<typeid(T2).name()<<endl;
    }
    T1 obj;

};
void test() {
    Son a;
    Son2<int, char> a2;
}

int main()
{
    test01();
    return 0;
}
