#include <iostream>
#include <list>
#include <queue>
#include <stack>
#include <string>
#include <algorithm>
using namespace std;
// push top pop
// first in last out
// not taverse / ergodic
// it can judge if empty and it's size
void stack__test() {
    stack<int> s;
    // inpput stack;
    s.push(10), s.push(20), s.push(30), s.push(40);
    // if stack is not empty, then exe
    while(!s.empty()) {
        cout<<s.top()<<" "; s.pop();
    }
    cout<<s.size();
}
/* //
*/
// queue
// push back front pop
// first in fisrt out
// 入队 push  出队 pop 
// not taverse / ergodic */
class Person {
public:
    Person(string name, int age) {
        this->m_name = name;
        this->age = age;
    }
    void printInfo() {
        cout<<this->m_name<<" "<<this->age<<endl;
    }
    string m_name;
    int age;
};
void queue__test() {
    queue<Person> q;
    Person p1("kerwin",20);
    Person p2("umins",23);
    Person p3("golitter",23);
    Person p4("golemon", 19);
    q.push(p1), q.push(p2), q.push(p3), q.push(p4);
    cout<<q.front().m_name<<endl;
    cout<<q.back().m_name<<endl;
    cout<<q.size();
    while(!q.empty()) {
        q.front().printInfo();
        q.pop();
    }
    cout<<q.size();
} 
/* **/
// list data pointer
void printList(list<int>& a) {
    for(auto &t:a) {
        cout<<t<<" ";
    }
    puts("");
}
void list__test() {
    list<int> lis;
    for(int i = 1; i <= 4; ++i) lis.push_back(i);
    printList(lis);
    list<int> L1(lis.begin(), lis.end());
    printList(L1);
    list<int> L2(L1);
    printList(L2);
    list<int> L3(10,131);
    printList(L3);
}
// assign append swap
void list__testt() {
    list<int> li(23,1212);
    printList(li);
    list<int> lii;
    lii = li;
    printList(lii);
    list<int> liii;
    liii.assign(li.begin(), li.end());
    printList(liii);
    list<int> liiii;
    liiii.assign(100,34);
    printList(liiii);
    // swap li.swap(lii);
    li.resize(2323);
    printList(li);
    li.resize(2);
    printList(li);
}
// insert erase
void test01() {
    list<int> L;
    L.push_back(1), L.push_back(2), L.push_back(3), L.push_back(4);
    L.push_front(100), L.push_front(200);
    printList(L);
    L.pop_back(); printList(L);
    L.pop_front(); printList(L);
    L.insert(L.begin(),121212121); printList(L);
    L.insert(L.end(), 444444444); printList(L);
    L.remove(1); printList(L);

    /*
    没有 下标表示法 NOT  L[] L.at()
    BCS: 链表，非线性，不支持随机访问

    只有：L.front()   L.back()
    iterator 不支持随机访问
    it++, it-- 可以， it += 1 不可以
    */
   printList(L);
   L.reverse();
   printList(L);
   // 不支持随机访问迭代器的容器，不可以用标准算法
   // 但是其 内部会提供相关算法;
   L.sort(); // 可以用cmp函数
   printList(L);
}
int main()
{
    test01();

}
