#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

// 菱形继承;
class Animal {
public:
	int m_Age;
};

// 利用虚继承 解决菱形继承的问题;
// 在继承之前，加上关键字 virtual 变为 虚继承;
// 加上 virtual后， Animal 被称为 虚基类;
class Sheep: virtual public Animal {

};
class Tuo: virtual public Animal {

};
class SheepTuo: public Sheep, public Tuo {

};


void test01() {
	SheepTuo st;
	st.Sheep::m_Age = 18;
	st.Tuo::m_Age = 28;
	// 当菱形继承，两个父类拥有相同数据，需要加以作用域区分;
	cout<<"Sheep age : "<<st.Sheep::m_Age<<endl;
	cout<<"Tuo age : "<<st.Tuo::m_Age<<endl;
	// 菱形继承 导致 数据有两份， 资源浪费， 只需要有一份就行了。
	cout<<"SheepTuo age : "<<st.m_Age<<endl;
}






















// C++ 允许一个类继承多个类；
// 语法：class 子类：继承方式 父类1，继承方式 父类2，...

// 多继承可能会引发父类中有同名成员出现，需要加作用域区分;
// 实际开发中不建议 多继承;

class Base1 {
public:
	Base1() {
		m_A = 100;
	}
	int m_A;
};
class Base2 {
public:
	Base2() {
		m_A = 200;
	}
	int m_A;
};
// 子类 需要继承Base1 和 Base2;
// 语法：class 子类: 继承方式 父类1,...;`
class Son: public Base1, public Base2 {
public:
	Son() {
		m_C = 300;
		m_D = 400;
	}
	int m_C;
	int m_D;
};

void test1() {
	Son s;
	cout<<"size of Son "<<sizeof(Son)<<endl;

	// 多继承 中 如果父类有相同成员， 则要用 作用域隔开:
	cout<<"Base1 m_A = "<<s.Base1::m_A<<endl;
	cout<<"Base2 m_A = "<<s.Base2::m_A<<endl;
}
int main()
{
	test01();

	return 0;
}
