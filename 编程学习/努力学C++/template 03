#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <algorithm>

// 引用传递 --- 常引用：
            // const int & a;

#include <typeinfo>
using namespace std;

// 类模板对象做函数参数

template<class T1, class T2>
class People{
public:
    People(T1 name, T2 age) {
        this->m_Name = name;
        this->m_Age = age;
    }
    void showInfo() {
        cout<<"姓名："<<this->m_Name<<" "
        <<"年龄："<<this->m_Age<<endl;
    }
    T1 m_Name;
    T2 m_Age;
};
// 1，指定传入类型
// 1，是最常用的 ***
void printPeople(People<string, int>&p) {
    p.showInfo();
}
void testPeop() {
    People<string, int> p("孙悟空",100);
    printPeople(p);
}
// 2，参数模板化
template<class T1, class T2>
void printPeople2(People<T1, T2>&p) {
    p.showInfo();
    cout<<"T1 的类型为："<<typeid(T1).name() <<endl;
    cout<<"T2 的类型为："<<typeid(T2).name() <<endl;

}
void testPeop2() {
    People<string, int> p("猪八戒",100);
    printPeople2(p);
}
// 3， 整个类模板化
template<class T>
void printPeople3(T &p) {
    p.showInfo();
    cout<<"T的数据类型："<<typeid(T).name()<<endl;
}
void testPeop3() {
    People<string, int> p("唐僧",340);
    printPeople3(p);
}


// 类模板中成员函数创建时机
// 类模板中成员函数在调用时才去创建

class Person1 {
public:
    void showInfo1() {
        cout<<"This is Person1"<<endl;
    }
};

class Person2 {
public:
    void showInfo2() {
        cout<<"This si Person2"<<endl;
    }
};

template<class T>
class MyClass {
public:
    T  obj;
    // 类模板中的的成员函数
    void func1() {
        obj.showInfo1();
    }
    void func2() {
        obj.showInfo2();
    }
};

void testDefault() {
    MyClass<Person1> p11;
    p11.func1();
}

// 类模板与函数模板的区别：
// 1，类模板没有自动类型推导使用方式
    // Error: Person p1("孙悟空", 999);
// 2，类模板在模板参数列表中可以有默认参数;
    // e.g. template<class NameType, class AgeType = int> ----- 默认

// 总结：类模板和函数模板语法相似，在声明模板template后面加类，

// 类模板
template<class NameType, class NameAge>
class Person {
public:
    Person(NameType name, NameAge age) {
        this->m_name = name;
        this->m_age = age;
    }
    void showInfo() {
        cout<<this->m_name<<" "
        <<this->m_age<<endl;
    }
    string m_name;
    int m_age;
};

void test1() {
    Person<string, int> p1("孙悟空", 999);
    p1.showInfo();
}

int main()
{
    testPeop3();

    return 0;
}
