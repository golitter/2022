/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pHead ListNode类 
     * @param k int整型 
     * @return ListNode类
     */
    // So easy!
    //one way : traverse list, find out it has how many nodes;;
    // the other: declare a fast pointer, point to the N node;
    // then declare a slow that equal to head pointer;
    // traverse fast list;
    // can answer the question;
    // and if delete the N node, you can declare two pointers, use method of two pointer
    // Originally, I usually use three pointers , pre, cur and suf, Now find it is not laconic;
    // two pointer can do it ,and look good;
    // if it is not has head node pointer, it is difficant for the first operation.
    // so can add a head node pointer, maybe easier than not has it ;
    
    ListNode* FindKthToTail(ListNode* pHead, int k) {
        // write code here
        ListNode *fast, *slow, *pre, *cur;
        fast = pHead; slow = pHead;
        for(int i = 0; i < k; i++) {
            if(fast) {
                fast = fast->next;
            } else {
                return NULL;
            }
        }
        while(fast) {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};
