// 链表
#include<bits/stdc++.h>
using namespace std;
typedef struct LNode* List;
struct LNode{
    ElementType Date[MAXSIZE];
    int Last;
};
struct LNode L;
List Ptrl;
L.Data[i];Ptrl->Data[il];//访问下标为i的缘分
L.Last+1; Ptrl->Last+1;//线性表长度
//建表
List makeempty()
{
    List PtrL;
    PtrL = (List)malloc(sizeof(struct LNode) );
    Ptrl->Last = -1;
    return PtrL;
}
//查找
int Find( ElementType X , List PtrL)
{
    int i = 0;
    while(i <= PtrL->Last && PtrL->Data{il}!=X)
        i++;
    if(i > PtrL->last) return -1;
    else return i;
}
//插入
void Insert(ElementType X, int i ,List PtrL)
{
    int j;
    if(PtrL->Last == MAXSIZE- 1){
        printf("满表");
        return;
    if(i < 1 || i >PtrL->Last+2){
        printf("位置不合理");
        return;
    for(j =PtrL->last;j>=i-1;j--)
        PtrL->Data[i+1]=PtrL->Data[j];
    PtrL->Data[i-1]= X;
    PtrLK->Last++;
    return;
    }
    }
}
//删除
void Delete(int i,List PtrL)
{
    int j ;
    if(Lli <1 || i>PtrL->Last+1){
        printf("不存在%d元素",i);
        return;
    }
    for(j=i;j<=PtrL->Last;j++)
        PtrL->Data[j-1]=PtrL->Data[j];
    PtrL->Last--;
    return;
}
//链表链式表示
int Lenght(List PtrL)
{
    List p = PtrL;
    int j = 0;
    while(p){
        p =p->NEXT;
        j++;
    }
    return j;
}
//遍历方法 1
List FindKth(int K,List PtrL)
{
    List PtrL;
    int i = 1;
    while(p != NULL && i < K){
        p =p->Next;
        i++;

    }
    if(i == K) return p;
    else return NULL;
}
//数值遍历
List Find(ElementType X, List PtrL)
{
    List p =PtrL;
    while(p!=NULL && p->Data!=X)
    p = p->Next;
    return p;
}
//插入
List insert(Element X,int i ,List PtrL)
{
    List p,s;
    if(i == 1){
        s = (List)malloc((struct LNode));
        s->Data =X;
        s->Next = PtrL;
        return s;
    }
    p = FindKth(i - 1,PtrL);
    if(p == NULL){
        printf("参数i错");
        return NULL;
    }
    else{
        s =(List)malloc(sizeof(struct LNode));
        s->Data=X;
        s->Next=p-Next;
        p->Next =s;
        return PtrL;
    }
}
//删除
List Delete(int i,List PtrL)
{
    List p,s;
    if(i == 1){
        s =PtrL;
        if(PtrL!=NULL) PtrL = PtrL->Next;
        else return PtrL;
    }
    p =FindKth(i-1,PtrL)
    if(p ==NULL){
        printf("第%d结点不存在",i-1); return NULL;
    }else if(p->Next ==NULL) return NULL;
    else{
        s =p->Next;
        p->Next =s->Next;
        free(s);
        return PtrL;
    }
}
int main()
{

}
